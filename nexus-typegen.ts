/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthenticationType: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  ChangePasswordType: { // root type
    newpassword?: string | null; // String
    password: string; // String!
    token: string; // String!
    username: string; // String!
  }
  CreateMovieType: { // root type
    movie: NexusGenRootTypes['Movie']; // Movie!
  }
  DeleteMovieType: { // root type
    message: string; // String!
  }
  GetMovieType: { // root type
    createdby?: string | null; // String
    description?: string | null; // String
    directorName?: string | null; // String
    movieName?: string | null; // String
    releaseData?: string | null; // String
  }
  Movie: { // root type
    description: string; // String!
    directorName: string; // String!
    id: number; // Int!
    movieName: string; // String!
    releaseDate: string; // String!
  }
  Mutation: {};
  Query: {};
  RegisterType: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  UpdateMovieType: { // root type
    message: string; // String!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    password: string; // String!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthenticationType: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  ChangePasswordType: { // field return type
    newpassword: string | null; // String
    password: string; // String!
    token: string; // String!
    username: string; // String!
  }
  CreateMovieType: { // field return type
    movie: NexusGenRootTypes['Movie']; // Movie!
  }
  DeleteMovieType: { // field return type
    message: string; // String!
  }
  GetMovieType: { // field return type
    createdby: string | null; // String
    description: string | null; // String
    directorName: string | null; // String
    movieName: string | null; // String
    releaseData: string | null; // String
  }
  Movie: { // field return type
    description: string; // String!
    directorName: string; // String!
    id: number; // Int!
    movieName: string; // String!
    releaseDate: string; // String!
  }
  Mutation: { // field return type
    changepassword: NexusGenRootTypes['ChangePasswordType']; // ChangePasswordType!
    createmovie: NexusGenRootTypes['CreateMovieType']; // CreateMovieType!
    deletemovie: NexusGenRootTypes['DeleteMovieType']; // DeleteMovieType!
    login: NexusGenRootTypes['AuthenticationType']; // AuthenticationType!
    register: NexusGenRootTypes['RegisterType']; // RegisterType!
    updateMovie: NexusGenRootTypes['UpdateMovieType']; // UpdateMovieType!
  }
  Query: { // field return type
    getCurrentUserMovie: NexusGenRootTypes['Movie'][]; // [Movie!]!
    getmovie: NexusGenRootTypes['Movie'][]; // [Movie!]!
    getusersmovie: NexusGenRootTypes['Movie'][]; // [Movie!]!
  }
  RegisterType: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  UpdateMovieType: { // field return type
    message: string; // String!
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    password: string; // String!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthenticationType: { // field return type name
    token: 'String'
    user: 'User'
  }
  ChangePasswordType: { // field return type name
    newpassword: 'String'
    password: 'String'
    token: 'String'
    username: 'String'
  }
  CreateMovieType: { // field return type name
    movie: 'Movie'
  }
  DeleteMovieType: { // field return type name
    message: 'String'
  }
  GetMovieType: { // field return type name
    createdby: 'String'
    description: 'String'
    directorName: 'String'
    movieName: 'String'
    releaseData: 'String'
  }
  Movie: { // field return type name
    description: 'String'
    directorName: 'String'
    id: 'Int'
    movieName: 'String'
    releaseDate: 'String'
  }
  Mutation: { // field return type name
    changepassword: 'ChangePasswordType'
    createmovie: 'CreateMovieType'
    deletemovie: 'DeleteMovieType'
    login: 'AuthenticationType'
    register: 'RegisterType'
    updateMovie: 'UpdateMovieType'
  }
  Query: { // field return type name
    getCurrentUserMovie: 'Movie'
    getmovie: 'Movie'
    getusersmovie: 'Movie'
  }
  RegisterType: { // field return type name
    user: 'User'
  }
  UpdateMovieType: { // field return type name
    message: 'String'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    password: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    changepassword: { // args
      newpassword: string; // String!
      password: string; // String!
      username: string; // String!
    }
    createmovie: { // args
      description: string; // String!
      directorName: string; // String!
      movieName: string; // String!
      releaseDate: string; // String!
    }
    deletemovie: { // args
      id: number; // Int!
    }
    login: { // args
      password: string; // String!
      username: string; // String!
    }
    register: { // args
      email: string; // String!
      password: string; // String!
      username: string; // String!
    }
    updateMovie: { // args
      description: string; // String!
      directorName: string; // String!
      id: number; // Int!
      movieName: string; // String!
      releaseDate: string; // String!
    }
  }
  Query: {
    getusersmovie: { // args
      createdby: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}